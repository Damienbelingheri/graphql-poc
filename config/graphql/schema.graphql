scalar BirthDate

# Type of vehicle manage by the app
type Car implements Vehicle {
  # Internal identifier
  id: ID!

  # The manufacturer of the car
  manufacturer: String!

  # The model of the car
  model: String!

  # Number of seats in the car
  seats_number: Int!
}

scalar DateTime

# Person manage by the app
type Person {
  # Internal identifier
  id: ID!

  # Name of the person
  name: String!

  # Title of the person
  title: PersonTitle!

  # Birth date of the person
  birth_date: BirthDate

  # Date of creation of the person in database
  created_at: DateTime!

  # Vehicles of the person
  vehicles(
    # Resolves vehicle using its id.
    id: String
  ): [Vehicle]
}

# Title of a person
enum PersonTitle {
  unknown
  Miss
  Mrs
  Ms
  Mr
}

type Query {
  persons(
    # Resolves person using its id.
    id: String
  ): [Person]
  person(
    # Resolves person using its id.
    id: String!
  ): Person
  vehicles(
    # Resolves vehicle using its owner id.
    owner: String

    # Resolves vehicle using its id.
    id: String
  ): [Vehicle]
  car(
    # Resolves car using its id.
    id: String!
  ): Car
  truck(
    # Resolves truck using its id.
    id: String!
  ): Truck
}

# Type of vehicle manage by the app
type Truck implements Vehicle {
  # Internal identifier
  id: ID!

  # The manufacturer of the truck
  manufacturer: String!

  # The model of the truck
  model: String!

  # Maximum load of the truck
  maximum_load: Int!
}

# A vehicle interface
interface Vehicle {
  # The id of the vehicle
  id: ID!

  # The manufacturer of the vehicle
  manufacturer: String!

  # The model of the vehicle
  model: String!
}
